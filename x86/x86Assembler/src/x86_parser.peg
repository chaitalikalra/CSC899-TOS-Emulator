{
  function makeString(o) {
  	return o.join("");
  }
  
  function makeStringTrimmed(o) {
  	return o.join("").trim();
  }
}

CodeSection
  = (InstructionWithLabel / DirectiveWithLabel)*

DirectiveWithLabel
  = __ l:(Label __)? i:DirectiveInstruction c:(_ Comment)? __ {return {tag: "DirectiveWithLabel", directive:i, label:l == null? null: l[0], comment: c == null? null: c[1]};}

InstructionWithLabel
  = __ l:(Label __)? i:Instruction c:(_ Comment)? __ {return {tag: "InstructionWithLabel", instruction:i, label:l == null? null: l[0], comment: c == null? null: c[1]};}

Comment
	= _ CommentMarker _ s:([^\n]*) _ {return {tag: "Comment", value: makeStringTrimmed(s)};}

CommentMarker
	= ("#" / ";")

DirectiveInstruction
  = _ directive:DirectiveName _ 
  	match:(
    	d1:DirectiveOperand _ d3:("," _ d2:DirectiveOperand _ {return d2;})*
    )? 
  _ {
  	return {
    	tag:"Directive",
        operator: directive["value"],
        operands: match == null ? [] : [match[0], match[2]].flat(),
        location: location()
    }
  }

DirectiveOperand
  = Number / String

Instruction
  = _ instruction:(BinaryInstruction / UnaryInstruction / NullaryInstruction) _ {return instruction;}

BinaryInstruction
  = operator:Mnemonic _ op1:Operand _ "," _ op2:Operand {return {tag:"Instruction", operator:operator, operands:[op1, op2], location:location()}}
UnaryInstruction
 = operator:Mnemonic _ op1:Operand {return {tag:"Instruction", operator:operator, operands:[op1], location:location()}}

NullaryInstruction
 = operator:Mnemonic {return {tag:"Instruction", operator:operator, operands:[], location:location()}}

Operand
  = op:(NumericConstant/ Register / IndirectAddress) {return {tag: "Operand", value: op};} /
    id:Identifier {return {tag: "Operand", value:{tag: "LabelAddress", value: id}};}

IndirectAddress
  = _ offset:Offset? _ "(" _ baseReg:Register _")" {return {tag: "IndirectAddess", offset: offset, baseReg: baseReg, indexReg: null, scale: null}} /
  _ offset:Offset? _ "(" _ baseReg:Register? _ "," _ indexReg:Register? _ ")" {return {tag: "IndirectAddess", offset: offset, baseReg: baseReg, indexReg: indexReg, scale: null}} /
  _ offset:Offset? _ "(" _ baseReg:Register? _ "," _ indexReg:Register? _ "," _ scale:Scale? _ ")" {return {tag: "IndirectAddess", offset: offset, baseReg: baseReg, indexReg: indexReg, scale: scale}}

Scale
  = [0-9]+ {return {tag: "Number", value: parseInt(text(), 10)}; }

Offset
 = [-+]?[0-9]+ { return {tag: "Number", value: parseInt(text(), 10)}; }

Register
  = "%"name:RegisterName {return {tag: "Register", value: makeString(name).toLowerCase()}}

RegisterName
  = ([a-zA-Z][a-zA-Z][a-zA-Z]) /
  	([a-zA-Z][a-zA-Z])

DirectiveName
  = ("." s:([a-zA-Z0-9][a-zA-Z0-9]*) { return { tag: "DirectiveName", value: makeString([s[0], makeString(s[1])]) }; })

Label
  = identifier:Identifier ":" {return {tag: "Label", value: identifier.value};}

Mnemonic
  = ([a-zA-Z][a-zA-Z]*) {return text().toLowerCase();}

Identifier
  = ([a-zA-Z_][a-zA-Z_0-9]* { return { tag: "Identifier", value: text() }; })

NumericConstant
  = "$"con:Number {return {tag: "NumericConstant", value: con.value};}

String
  = '"' s:([^"]*) '"'{ return { tag: "String", value:makeString(s)}; }

Number
  = ("0x"[0-9a-fA-F]+ { return { tag: "Number", value: parseInt(text(), 16), size: 4 }; }) /
	[-+]?[0-9]+ { return { tag: "Number", value: parseInt(text(), 10), size: 4 }; }

_ "whitespace"
  = [ \t\r]*

__ "whitespace_plus_lines"
  = [ \t\r\n]*
